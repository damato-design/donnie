---
const { message } = Astro.props;
---

<div class="sticky-notes">
    <ul class="stickies">
        { Array.from({ length: 12 }, (_, i) => <li
            class="sticky"
            data-content={ message }
            style={ `--index: ${i}; --rotate: ${(Math.random() - .5) * 5}deg` }/>) }
    </ul>
    <div class="content">{ message }</div>
</div>

<style>
    .sticky-notes {
        position: relative;
        max-width: 900px;
        margin-inline: auto;
        display: block;
        font-family: 'Delicious Handrawn', 'Segoe Print', 'Bradley Hand', Chilanka, TSCu_Comic, casual, cursive;
        font-size: 6rem;
        text-align: center;
        container-type: inline-size;
    }

    .stickies {
        margin: 0;
        padding: 0;
        list-style: none;
        position: absolute;
        inset: 0;
        display: flex;
        flex-wrap: wrap;
        perspective: 1000px;
    }

    .sticky {
        --cols: calc(var(--amount) / 2);
        --rows: 2;
        --col: 0;
        --row: 0;
        width: calc(100% / var(--cols));
        height: calc(100% / var(--rows));
        background-color: yellow;
        background-image: linear-gradient(
            to bottom, 
            color-mix(in srgb, black, transparent 90%) 15%,
            color-mix(in srgb, white, transparent 100%) 25%);
        box-shadow: 0 13px 18px rgba(128, 128, 128, .3);
        transform-origin: center top;
        transform-style: preserve-3d;
        transform: rotate(var(--rotate));
        overflow: hidden;
        position: relative;
        transition: transform .218s ease;
    }

    .sticky:hover {
        transform: rotatex(10deg);
        background-image: linear-gradient(
            to bottom, 
            color-mix(in srgb, black, transparent 91%) 15%,
            color-mix(in srgb, white, transparent 90%) 25%);
    }

    .sticky:after {
        content: attr(data-content);
        position: absolute;
        width: calc(100% * var(--cols));
        height: calc(100% * var(--rows));
        left: calc(var(--col) * -100%);
        top: calc(var(--row) * -100%);
    }

    .sticky {
        --amount: 4;
        display: none;
    }

    .sticky:nth-child(n + 3) {
        --row: 1;
    }

    .sticky:nth-child(2n + 2) {
        --col: 1;
    }

    .sticky:not(:nth-child(n+5)) {
        display: block;
    }

    @container (min-width: 580px) {
        .sticky {
            --amount: 8;
        }

        .sticky:nth-child(n + 3) {
            --row: 0;
        }

        .sticky:nth-child(n + 5) {
            --row: 1;
        }

        .sticky:nth-child(4n + 1) {
            --col: 0;
        }

        .sticky:nth-child(4n + 2) {
            --col: 1;
        }

        .sticky:nth-child(4n + 3) {
            --col: 2;
        }

        .sticky:nth-child(4n + 4) {
            --col: 3;
        }        

        .sticky:not(:nth-child(n+9)) {
            display: block;
        }
    }

    @container (min-width: 780px) {
        .sticky {
            --amount: 12;
        }

        .sticky:nth-child(n + 5) {
            --row: 0;
        }

        .sticky:nth-child(n + 7) {
            --row: 1;
        }

        .sticky:nth-child(6n + 1) {
            --col: 0;
        }

        .sticky:nth-child(6n + 2) {
            --col: 1;
        }

        .sticky:nth-child(6n + 3) {
            --col: 2;
        }

        .sticky:nth-child(6n + 4) {
            --col: 3;
        }

        .sticky:nth-child(6n + 5) {
            --col: 4;
        }

        .sticky:nth-child(6n + 6) {
            --col: 5;
        }

        .sticky:not(:nth-child(n+13)) {
            display: block;
        }
    }

    .content {
        visibility: hidden;
    }

    .content,
    .sticky:after {
        display: flex;
        align-items: center;
        justify-content: center;
        padding: 6rem;
    }
</style>