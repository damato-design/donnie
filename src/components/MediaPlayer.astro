<style>
  media-player {
    background-image: url('/images/earbuds.png');
    background-repeat: no-repeat;
    background-size: min(400px, 100%);
    background-position-y: center;
    background-position-x: 40%;
    display: flex;
    align-items: center;
    padding: 2rem;
    perspective: 1000px;
  }

  .ipod {
    background-image: linear-gradient(45deg, #f1f2f3, #ffffff);
    box-shadow: 
      inset 5px -3px 16px 2px color-mix(in srgb,#444444,transparent 40%),
      -34px 3px 28px 14px color-mix(in srgb,#000000,transparent 80%),
      -12px 1px 13px -10px color-mix(in srgb,#000000,transparent 50%);
    border-radius: 1rem;
    border: 1px solid #a2a2a2;
    padding-inline-start: 2rem;
    padding-inline-end: 1rem;
    padding-block-start: 1rem;
    padding-block-end: 1.5rem;
    max-width: 240px;
    display: flex;
    flex-direction: column;
    justify-content: center;
    gap: 1rem;
    margin-inline-start: auto;
    margin-inline-end: 25%;
    transform: rotatez(-5deg) rotatey(8deg);
  }

  .screen {
    background-image: linear-gradient(135deg, #a5a59b, #d6d5d0);
    box-shadow: inset 0px 0px 10px 2px #6a6a6a;
    border: 1px solid #ffffff;
    color: #484647;
    border-radius: .35rem;
    opacity: .8;
    flex: 1;
    display: grid;
    grid-template-rows: auto auto;
    overflow: hidden;
    font-family: ui-monospace, 'Cascadia Code', 'Source Code Pro', Menlo, Consolas, 'DejaVu Sans Mono', monospace;
    font-size: .9em;
    font-weight: bolder;
  }

  .title-bar {
    border-bottom: 1px solid #484647;
    display: flex;
    justify-content: center;
    align-items: center;
    padding: .5rem .5rem .25rem;
    grid-row: 1;
    grid-column: 1;
    margin-inline: 4px;
  }

  .play-icon {
    border-left: 12px solid #484647;
    border-top: 5px solid transparent;
    border-bottom: 5px solid transparent;
    margin-inline-end: auto;
    width: 20px;
  }

  .battery {
    color: #484647;
    outline: 2px solid ;
    outline-offset: 1px;
    aspect-ratio: 2;
    height: .5rem;
    margin-inline-end: .25rem;
    margin-inline-start: auto;
    display: flex;
    align-items: center;
    background-image: linear-gradient(
      to right,
      currentcolor 0%,
      currentcolor 30%,
      transparent 30%,
      transparent 35%,
      currentcolor 35%,
      currentcolor 65%,
      transparent 65%,
      transparent 70%,
      currentcolor 70%,
      currentcolor 100%
    );
  }

  .battery:after {
    content: '';
    height: 100%;
    width: .25rem;
    margin-inline-start: auto;
    transform: translateX(calc(100% + 2px));
    border-right: 2px solid ;
    border-top: 2px solid ;
    border-bottom: 2px solid ;
  }

  .menu-options {
    list-style: none;
    margin: 0;
    padding: 0;
    overflow: auto;
    max-height: 120px;
    grid-row: 2;
    grid-column: 1;
  }

  .menu-options :global(li) {
    padding: 0.125rem;
    display: flex;
    justify-content: space-between;
    align-items: center;
  }

  .menu-options :global(button) {
    background: transparent;
    border: 0;
    font: inherit;
    color: inherit;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
    cursor: pointer;
    filter: grayscale(1);
    text-transform: uppercase;
  }

  .menu-options :global(li:hover) {
    background-color: #484647;
    color: #c1c1ba;
  }

  .menu-options li:after {
    content: "";
    border-bottom: 3px solid #484647;
    border-right: 3px solid #484647;
    width: 0.5rem;
    height: 0.5rem;
    transform: rotate(-45deg) skew(7deg, 7deg);
  }

  .media {
    border: 0;
    width: 100%;
    height: 100%;
    grid-row: 1 / -1;
    grid-column: 1 / -1;
    transform: translateX(100%);
    transition: transform .4s ease;
    will-change: transform;
  }

  .media[src] {
    transform: translateX(0%);
  }

  .outer-ring {
    font-family: sans-serif;
    font-size: .7em;
    font-weight: bolder;
    color: #999;
    border-radius: 100%;
    background-color: #ffffff;
    box-shadow: inset 5px -5px 30px -7px #777777;
    display: grid;
    aspect-ratio: 1;
    --section: 1rem;
    grid-template-columns: var(--section) auto var(--section);
    grid-template-rows: var(--section) auto var(--section);
    place-items: center;
    grid-template-areas:
      '. menu .'
      'back wheel forward'
      '. play .'
    ;
  }

  .outer-ring:before,
  .outer-ring:after {
    content: '';
    width: 100%;
    grid-column: 1 / -1;
    grid-row: 2;
    border-top: 1px solid #4D4D4D;
  }

  .outer-ring:before {
    transform: rotate(45deg);
  }

  .outer-ring:after {
    transform: rotate(-45deg);
  }

  :where(.outer-ring) :where(button) {
    padding: 0;
    background: none;
    border: 0;
    cursor: pointer;
    font: inherit;
    color: inherit;
  }

  .menu-button {
    grid-area: menu;
  }

  .stop {
    grid-area: play;
    display: flex;
    aspect-ratio: 1;
    background: currentColor;
    width: 8px;
  }

  .skip {
    display: flex;
    border-right: 2px solid;
  }

  .skip:before, .skip:after {
    content: '';
    border-left: 4px solid currentColor;
    border-top: 3px solid transparent;
    border-bottom: 3px solid transparent;
  }

  .forward {
    grid-area: forward;
  }

  .back {
    grid-area: back;
    transform: scale(-1);
  }

  .touch-wheel {
    grid-area: wheel;
    background-image: radial-gradient(farthest-side at 90% -70%, #b4b4b4, #F2F2F2);
    border: 1px solid #4D4D4D;
    box-shadow: 5px -5px 30px -7px #595959;
    border-radius: 100%;
    aspect-ratio: 1;
    display: flex;
    place-self: stretch;
    justify-content: center;
    align-items: center;
    z-index: 1;
  }

  .center-button {
    background-image: radial-gradient(farthest-side at -90% 80%, #999999, #F2F2F2);
    border: 1px solid #BABDC1;
    border-radius: 100%;
    aspect-ratio: 1;
    width: 40%;
  }

</style>

<media-player>
  <div class="ipod">
    <div class="screen">
      <header class="title-bar">
        <div class="play-icon"></div>
        <div class="title">iView</div>
        <div class="battery"></div>
      </header>
      <ul class="menu-options"></ul>
      <iframe class="media" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen/>
    </div>
    <div class="outer-ring">
      <button class="menu-button" type="button">menu</button>
      <button class="skip forward" type="button" aria-label="forward"></button>
      <button class="skip back" type="button" aria-label="back"></button>
      <button class="stop" type="button" aria-label="stop"></button>
      <div class="touch-wheel">
        <span class="center-button"></span>
      </div>
    </div>
  </div>
</media-player>

<script>

  function toEmbed(id) {
    const { groups } = id.match(/yt:video:(?<id>.+)/) || {};
    const url = new URL(`https://www.youtube.com/embed/${groups?.id}`);
    const params = {
      controls: '0',
      autoplay: '1',
      rel: '0',
      loop: '1',
      enablejsapi: '1'
    }
    url.search = (new URLSearchParams(params)).toString();
    return groups?.id ? url.toString() : null;
  }

  class MediaPlayer extends window.HTMLElement {
    constructor() {
      super();
      this.$menuOptions = this.querySelector('.menu-options');
      this.$mediaPlayer = this.querySelector('.media');
      this.$menuButton = this.querySelector('.menu-button');
      this.$backButton = this.querySelector('.back');
      this.$forwardButton = this.querySelector('.forward');
      this.$stopButton = this.querySelector('.stop');

      this.$menuButton.addEventListener('click', () => this.stop());
      this.$stopButton.addEventListener('click', () => this.stop());
      this.$backButton.addEventListener('click', () => {
        const index = this.findIndex(this.$mediaPlayer.src);
        this.play((index - 1) % this.items.length);
      });
      this.$forwardButton.addEventListener('click', () => {
        const index = this.findIndex(this.$mediaPlayer.src);
        this.play((index + 1) % this.items.length);
      });
    }

    connectedCallback() {
      fetch('/api/playlist').then((res) => res.json()).then((data) => this.load(data));
    }

    list() {
      this.items.forEach(({ title, src }, index) => {
        const $li = document.createElement('li');
        const $button = document.createElement('button');
        $li.appendChild($button);
        $button.type = 'button';
        $button.textContent = title;
        $button.title = title;
        $button.value = src;
        $button.onclick = () => this.play(index);
        this.$menuOptions.appendChild($li);
      });
    }

    play(index) {
      if (!this.items.at(index)?.src) return;
      this.$mediaPlayer.src = this.items.at(index)?.src;
    }

    stop() {
      this.$mediaPlayer.removeAttribute('src');
    }

    findIndex(src) {
      if (!src) return 0;
      return this.items.findIndex((item) => item.src === src);
    }

    load(data) {
      const { items } = data;
      this.items = items.reduce((acc, item) => {
        const { title, id } = item;
        return acc.concat({ title, src: toEmbed(id) });
      }, []);
      this.list();
    }
  }

  window.customElements.define('media-player', MediaPlayer);
</script>
